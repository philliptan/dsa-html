/* --------------------------------------------- */
/* Container-aware Patterns â€” 2025 Edition       */
/* Uses @container + token system                */
/* --------------------------------------------- */

/* 1. Define container types */
.container,
.card-grid,
.form-layout,
.auth-wall__card {
  container-type: inline-size; /* respond to width only */
  container-name: content;
}

/* 2. Responsive grid system using @container */
.grid {
  display: grid;
  gap: var(--space-4);
}

/* Base one-column */
.grid-cols-1 { grid-template-columns: 1fr; }

/* Dynamic behavior inside container */
@container content (min-width: 30rem) {
  .grid-cols-sm-2 { grid-template-columns: repeat(2, 1fr); }
}

@container content (min-width: 48rem) {
  .grid-cols-md-3 { grid-template-columns: repeat(3, 1fr); }
}

@container content (min-width: 64rem) {
  .grid-cols-lg-4 { grid-template-columns: repeat(4, 1fr); }
}

/* 3. Container-based typography scaling */
:root {
  --font-step-min: 0.875rem;
  --font-step-max: 1.25rem;
}
@container content (min-width: 40rem) {
  .text-fluid {
    font-size: clamp(var(--font-step-min), 1vw + 0.5rem, var(--font-step-max));
  }
}

/* 4. Adaptive Card Grid using container width */
.card-grid {
  display: grid;
  gap: var(--space-4);
  grid-template-columns: 1fr;
}
@container content (min-width: 36rem) {
  .card-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}
@container content (min-width: 64rem) {
  .card-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}

/* 5. Container-aware form layout */
.form-layout {
  display: grid;
  gap: var(--space-3);
}
@container content (min-width: 32rem) {
  .form-layout {
    grid-template-columns: repeat(2, 1fr);
  }
  .form-layout .form-actions {
    grid-column: 1 / -1;
    justify-content: flex-end;
  }
}

/* 6. Container-driven empty state */
.empty-state {
  text-align: center;
  padding: var(--space-6);
}
@container content (min-width: 40rem) {
  .empty-state {
    padding: var(--space-8);
  }
  .empty-state__icon {
    font-size: 4rem;
  }
}

/* 7. Container-aware wizard stepper */
.wizard {
  display: flex;
  flex-wrap: wrap;
  gap: var(--space-3);
  justify-content: center;
}
@container content (max-width: 28rem) {
  .wizard {
    flex-direction: column;
    align-items: flex-start;
  }
  .wizard-divider {
    display: none;
  }
}

/* 8. Layout grid tokens for utility classes */
.grid-gap-1 { gap: var(--space-1); }
.grid-gap-2 { gap: var(--space-2); }
.grid-gap-4 { gap: var(--space-4); }
.grid-gap-6 { gap: var(--space-6); }

/* Example responsive utility inside containers */
@container content (min-width: 48rem) {
  .md\:flex-row { flex-direction: row; }
}
